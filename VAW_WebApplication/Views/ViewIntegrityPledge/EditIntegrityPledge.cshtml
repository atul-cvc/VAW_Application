@model VAW_WebApplication.Models.Tran_1a_integritypledge_ViewModel

@{
    ViewBag.Title = "EditIntegrityPledge";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>INTEGRITY PLEDGE</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.VAW_Year, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.VAW_Year, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.VAW_Year, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.UniqueTransactionId)
                @Html.HiddenFor(model => model.CvoOrgCode)
                @Html.HiddenFor(model => model.CvoId)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OrganisationName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OrganisationName, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                @Html.ValidationMessageFor(model => model.OrganisationName, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.DateOfActivity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateOfActivity, new { htmlAttributes = new { @class = "form-control", @placeholder = "DD-MM-YYYY", @readonly = "true" } })
                @Html.ValidationMessageFor(model => model.DateOfActivity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TotalNoOfEmployees_UndertakenPledge, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TotalNoOfEmployees_UndertakenPledge, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TotalNoOfEmployees_UndertakenPledge, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TotalNoOfCustomers_UndertakenPledge, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TotalNoOfCustomers_UndertakenPledge, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TotalNoOfCustomers_UndertakenPledge, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TotalNoOfCitizen_UndertakenPledge, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TotalNoOfCitizen_UndertakenPledge, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TotalNoOfCitizen_UndertakenPledge, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-offset-2 col-md-2">
                    @Html.ActionLink("Back", "Index", null, new { @class = "btn btn-primary" })
                </div>
                <div class="col-md-2">
                    <input type="submit" value="Update" class="btn btn-success" />
                </div>
            </div>

        </div>
    </div>
}

<div>
    @section Scripts {

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const textArea = document.getElementById('myTextArea');
                const wordCountDisplay = document.getElementById('wordCount');
                const maxWords = 500;

                textArea.addEventListener('input', function () {
                    const words = textArea.value.trim().split(/\s+/).filter(Boolean);
                    const wordCount = words.length;

                    if (wordCount > maxWords) {
                        textArea.value = words.slice(0, maxWords).join(' ');
                    }

                    wordCountDisplay.textContent = `Word count: ${Math.min(wordCount, maxWords)} / ${maxWords}`;
                });
            });
        </script>

    }
    @*@Html.ActionLink("Back", "Index")*@
</div>